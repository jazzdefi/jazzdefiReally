{"ast":null,"code":"import BigNumber from \"bignumber.js\";\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK } from \"config\";\n/**\n * Get the APY value in %\n * @param stakingTokenPrice Token price in the same quote currency\n * @param rewardTokenPrice Token price in the same quote currency\n * @param totalStaked Total amount of stakingToken in the pool\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\n * @returns Null if the APY is NaN or infinite.\n */\n\nexport const getPoolApy = (stakingTokenPrice, rewardTokenPrice, totalStaked, tokenPerBlock) => {\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR);\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked);\n  const apy = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100);\n  return apy.isNaN() || !apy.isFinite() ? null : apy.toNumber();\n};\n/**\n * Get farm APY value in %\n * @param poolWeight allocationPoint / totalAllocationPoint\n * @param cakePriceUsd Cake price in USD\n * @param poolLiquidityUsd Total pool liquidity in USD\n * @returns\n */\n\nexport const getFarmApy = (poolWeight, cakePriceUsd, poolLiquidityUsd) => {\n  const yearlyCakeRewardAllocation = CAKE_PER_BLOCK.times(BLOCKS_PER_YEAR).times(poolWeight);\n  const apy = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100);\n  return apy.isNaN() || !apy.isFinite() ? null : apy.toNumber();\n};\nexport default null;","map":{"version":3,"sources":["/home/drab/Documents/jazzdefi/src/utils/apy.ts"],"names":["BigNumber","BLOCKS_PER_YEAR","CAKE_PER_BLOCK","getPoolApy","stakingTokenPrice","rewardTokenPrice","totalStaked","tokenPerBlock","totalRewardPricePerYear","times","totalStakingTokenInPool","apy","div","isNaN","isFinite","toNumber","getFarmApy","poolWeight","cakePriceUsd","poolLiquidityUsd","yearlyCakeRewardAllocation"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,QAAhD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAG,CACxBC,iBADwB,EAExBC,gBAFwB,EAGxBC,WAHwB,EAIxBC,aAJwB,KAKb;AACX,QAAMC,uBAAuB,GAAG,IAAIR,SAAJ,CAAcK,gBAAd,EAC7BI,KAD6B,CACvBF,aADuB,EAE7BE,KAF6B,CAEvBR,eAFuB,CAAhC;AAGA,QAAMS,uBAAuB,GAAG,IAAIV,SAAJ,CAAcI,iBAAd,EAAiCK,KAAjC,CAC9BH,WAD8B,CAAhC;AAGA,QAAMK,GAAG,GAAGH,uBAAuB,CAACI,GAAxB,CAA4BF,uBAA5B,EAAqDD,KAArD,CAA2D,GAA3D,CAAZ;AACA,SAAOE,GAAG,CAACE,KAAJ,MAAe,CAACF,GAAG,CAACG,QAAJ,EAAhB,GAAiC,IAAjC,GAAwCH,GAAG,CAACI,QAAJ,EAA/C;AACD,CAdM;AAgBP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAG,CACxBC,UADwB,EAExBC,YAFwB,EAGxBC,gBAHwB,KAIb;AACX,QAAMC,0BAA0B,GAAGlB,cAAc,CAACO,KAAf,CACjCR,eADiC,EAEjCQ,KAFiC,CAE3BQ,UAF2B,CAAnC;AAGA,QAAMN,GAAG,GAAGS,0BAA0B,CACnCX,KADS,CACHS,YADG,EAETN,GAFS,CAELO,gBAFK,EAGTV,KAHS,CAGH,GAHG,CAAZ;AAIA,SAAOE,GAAG,CAACE,KAAJ,MAAe,CAACF,GAAG,CAACG,QAAJ,EAAhB,GAAiC,IAAjC,GAAwCH,GAAG,CAACI,QAAJ,EAA/C;AACD,CAbM;AAeP,eAAe,IAAf","sourcesContent":["import BigNumber from \"bignumber.js\";\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK } from \"config\";\n\n/**\n * Get the APY value in %\n * @param stakingTokenPrice Token price in the same quote currency\n * @param rewardTokenPrice Token price in the same quote currency\n * @param totalStaked Total amount of stakingToken in the pool\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\n * @returns Null if the APY is NaN or infinite.\n */\nexport const getPoolApy = (\n  stakingTokenPrice: number,\n  rewardTokenPrice: number,\n  totalStaked: number,\n  tokenPerBlock: number\n): number => {\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice)\n    .times(tokenPerBlock)\n    .times(BLOCKS_PER_YEAR);\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(\n    totalStaked\n  );\n  const apy = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100);\n  return apy.isNaN() || !apy.isFinite() ? null : apy.toNumber();\n};\n\n/**\n * Get farm APY value in %\n * @param poolWeight allocationPoint / totalAllocationPoint\n * @param cakePriceUsd Cake price in USD\n * @param poolLiquidityUsd Total pool liquidity in USD\n * @returns\n */\nexport const getFarmApy = (\n  poolWeight: BigNumber,\n  cakePriceUsd: BigNumber,\n  poolLiquidityUsd: BigNumber\n): number => {\n  const yearlyCakeRewardAllocation = CAKE_PER_BLOCK.times(\n    BLOCKS_PER_YEAR\n  ).times(poolWeight);\n  const apy = yearlyCakeRewardAllocation\n    .times(cakePriceUsd)\n    .div(poolLiquidityUsd)\n    .times(100);\n  return apy.isNaN() || !apy.isFinite() ? null : apy.toNumber();\n};\n\nexport default null;\n"]},"metadata":{},"sourceType":"module"}