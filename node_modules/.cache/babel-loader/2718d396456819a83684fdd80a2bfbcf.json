{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { getBep20Contract, getCakeContract } from \"utils/contractHelpers\";\nimport useWeb3 from \"./useWeb3\";\nimport useRefresh from \"./useRefresh\";\n\nconst useTokenBalance = tokenAddress => {\n  _s();\n\n  const [balance, setBalance] = useState(new BigNumber(0));\n  const {\n    account\n  } = useWeb3React();\n  const web3 = useWeb3();\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3);\n      const res = await contract.methods.balanceOf(account).call();\n      setBalance(new BigNumber(res));\n    };\n\n    if (account) {\n      fetchBalance();\n    }\n  }, [account, tokenAddress, web3, fastRefresh]);\n  return balance;\n};\n\n_s(useTokenBalance, \"EQ6LHnDbUeW3KVQugCGWgH7q+1c=\", false, function () {\n  return [useWeb3React, useWeb3, useRefresh];\n});\n\nexport const useTotalSupply = () => {\n  _s2();\n\n  const {\n    slowRefresh\n  } = useRefresh();\n  const [totalSupply, setTotalSupply] = useState();\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract();\n      const supply = await cakeContract.methods.totalSupply().call();\n      setTotalSupply(new BigNumber(supply));\n    }\n\n    fetchTotalSupply();\n  }, [slowRefresh]);\n  return totalSupply;\n};\n\n_s2(useTotalSupply, \"2ibDHTZcwYU9LaabTrlsn9E1ufk=\", false, function () {\n  return [useRefresh];\n});\n\nexport const useBurnedBalance = tokenAddress => {\n  _s3();\n\n  const [balance, setBalance] = useState(new BigNumber(0));\n  const {\n    slowRefresh\n  } = useRefresh();\n  const web3 = useWeb3();\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3);\n      const res = await contract.methods.balanceOf(\"0x000000000000000000000000000000000000dEaD\").call();\n      setBalance(new BigNumber(res));\n    };\n\n    fetchBalance();\n  }, [web3, tokenAddress, slowRefresh]);\n  return balance;\n};\n\n_s3(useBurnedBalance, \"sSzCNBH/1SasbZPpMqva/xXBs3k=\", false, function () {\n  return [useRefresh, useWeb3];\n});\n\nexport default useTokenBalance;","map":{"version":3,"sources":["/home/drab/Documents/jazzdefi/src/hooks/useTokenBalance.ts"],"names":["useEffect","useState","BigNumber","useWeb3React","getBep20Contract","getCakeContract","useWeb3","useRefresh","useTokenBalance","tokenAddress","balance","setBalance","account","web3","fastRefresh","fetchBalance","contract","res","methods","balanceOf","call","useTotalSupply","slowRefresh","totalSupply","setTotalSupply","fetchTotalSupply","cakeContract","supply","useBurnedBalance"],"mappings":";;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,gBAAT,EAA2BC,eAA3B,QAAkD,uBAAlD;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,eAAe,GAAIC,YAAD,IAA0B;AAAA;;AAChD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAIC,SAAJ,CAAc,CAAd,CAAD,CAAtC;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAcT,YAAY,EAAhC;AACA,QAAMU,IAAI,GAAGP,OAAO,EAApB;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAkBP,UAAU,EAAlC;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,YAAY,GAAG,YAAY;AAC/B,YAAMC,QAAQ,GAAGZ,gBAAgB,CAACK,YAAD,EAAeI,IAAf,CAAjC;AACA,YAAMI,GAAG,GAAG,MAAMD,QAAQ,CAACE,OAAT,CAAiBC,SAAjB,CAA2BP,OAA3B,EAAoCQ,IAApC,EAAlB;AACAT,MAAAA,UAAU,CAAC,IAAIT,SAAJ,CAAce,GAAd,CAAD,CAAV;AACD,KAJD;;AAMA,QAAIL,OAAJ,EAAa;AACXG,MAAAA,YAAY;AACb;AACF,GAVQ,EAUN,CAACH,OAAD,EAAUH,YAAV,EAAwBI,IAAxB,EAA8BC,WAA9B,CAVM,CAAT;AAYA,SAAOJ,OAAP;AACD,CAnBD;;GAAMF,e;UAEgBL,Y,EACPG,O,EACWC,U;;;AAiB1B,OAAO,MAAMc,cAAc,GAAG,MAAM;AAAA;;AAClC,QAAM;AAAEC,IAAAA;AAAF,MAAkBf,UAAU,EAAlC;AACA,QAAM,CAACgB,WAAD,EAAcC,cAAd,IAAgCvB,QAAQ,EAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeyB,gBAAf,GAAkC;AAChC,YAAMC,YAAY,GAAGrB,eAAe,EAApC;AACA,YAAMsB,MAAM,GAAG,MAAMD,YAAY,CAACR,OAAb,CAAqBK,WAArB,GAAmCH,IAAnC,EAArB;AACAI,MAAAA,cAAc,CAAC,IAAItB,SAAJ,CAAcyB,MAAd,CAAD,CAAd;AACD;;AAEDF,IAAAA,gBAAgB;AACjB,GARQ,EAQN,CAACH,WAAD,CARM,CAAT;AAUA,SAAOC,WAAP;AACD,CAfM;;IAAMF,c;UACad,U;;;AAgB1B,OAAO,MAAMqB,gBAAgB,GAAInB,YAAD,IAA0B;AAAA;;AACxD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAIC,SAAJ,CAAc,CAAd,CAAD,CAAtC;AACA,QAAM;AAAEoB,IAAAA;AAAF,MAAkBf,UAAU,EAAlC;AACA,QAAMM,IAAI,GAAGP,OAAO,EAApB;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,YAAY,GAAG,YAAY;AAC/B,YAAMC,QAAQ,GAAGZ,gBAAgB,CAACK,YAAD,EAAeI,IAAf,CAAjC;AACA,YAAMI,GAAG,GAAG,MAAMD,QAAQ,CAACE,OAAT,CACfC,SADe,CACL,4CADK,EAEfC,IAFe,EAAlB;AAGAT,MAAAA,UAAU,CAAC,IAAIT,SAAJ,CAAce,GAAd,CAAD,CAAV;AACD,KAND;;AAQAF,IAAAA,YAAY;AACb,GAVQ,EAUN,CAACF,IAAD,EAAOJ,YAAP,EAAqBa,WAArB,CAVM,CAAT;AAYA,SAAOZ,OAAP;AACD,CAlBM;;IAAMkB,gB;UAEarB,U,EACXD,O;;;AAiBf,eAAeE,eAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { getBep20Contract, getCakeContract } from \"utils/contractHelpers\";\nimport useWeb3 from \"./useWeb3\";\nimport useRefresh from \"./useRefresh\";\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0));\n  const { account } = useWeb3React();\n  const web3 = useWeb3();\n  const { fastRefresh } = useRefresh();\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3);\n      const res = await contract.methods.balanceOf(account).call();\n      setBalance(new BigNumber(res));\n    };\n\n    if (account) {\n      fetchBalance();\n    }\n  }, [account, tokenAddress, web3, fastRefresh]);\n\n  return balance;\n};\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh();\n  const [totalSupply, setTotalSupply] = useState<BigNumber>();\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract();\n      const supply = await cakeContract.methods.totalSupply().call();\n      setTotalSupply(new BigNumber(supply));\n    }\n\n    fetchTotalSupply();\n  }, [slowRefresh]);\n\n  return totalSupply;\n};\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0));\n  const { slowRefresh } = useRefresh();\n  const web3 = useWeb3();\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3);\n      const res = await contract.methods\n        .balanceOf(\"0x000000000000000000000000000000000000dEaD\")\n        .call();\n      setBalance(new BigNumber(res));\n    };\n\n    fetchBalance();\n  }, [web3, tokenAddress, slowRefresh]);\n\n  return balance;\n};\n\nexport default useTokenBalance;\n"]},"metadata":{},"sourceType":"module"}