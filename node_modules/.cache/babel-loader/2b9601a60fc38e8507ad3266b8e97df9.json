{"ast":null,"code":"import { InjectedConnector } from '@web3-react/injected-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { BscConnector } from '@binance-chain/bsc-connector';\nimport { ConnectorNames } from '@jazzdefi/uikit';\nimport getNodeUrl from './getRpcUrl';\nconst POLLING_INTERVAL = 12000;\nconst rpcUrl = getNodeUrl();\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10);\nconst injected = new InjectedConnector({\n  supportedChainIds: [chainId]\n});\nconst walletconnect = new WalletConnectConnector({\n  rpc: {\n    [chainId]: rpcUrl\n  },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL\n});\nconst bscConnector = new BscConnector({\n  supportedChainIds: [chainId]\n});\nexport const connectorsByName = {\n  [ConnectorNames.Injected]: injected,\n  [ConnectorNames.WalletConnect]: walletconnect,\n  [ConnectorNames.BSC]: bscConnector\n};\nexport const getLibrary = provider => {\n  return provider;\n};","map":{"version":3,"sources":["/home/drab/Documents/jazzdefi/src/utils/web3React.ts"],"names":["InjectedConnector","WalletConnectConnector","BscConnector","ConnectorNames","getNodeUrl","POLLING_INTERVAL","rpcUrl","chainId","parseInt","process","env","REACT_APP_CHAIN_ID","injected","supportedChainIds","walletconnect","rpc","bridge","qrcode","pollingInterval","bscConnector","connectorsByName","Injected","WalletConnect","BSC","getLibrary","provider"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,gCAAlC;AACA,SAASC,sBAAT,QAAuC,qCAAvC;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,cAAT,QAA+B,iBAA/B;AAEA,OAAOC,UAAP,MAAuB,aAAvB;AAEA,MAAMC,gBAAgB,GAAG,KAAzB;AACA,MAAMC,MAAM,GAAGF,UAAU,EAAzB;AACA,MAAMG,OAAO,GAAGC,QAAQ,CAACC,OAAO,CAACC,GAAR,CAAYC,kBAAb,EAAiC,EAAjC,CAAxB;AAEA,MAAMC,QAAQ,GAAG,IAAIZ,iBAAJ,CAAsB;AAAEa,EAAAA,iBAAiB,EAAE,CAACN,OAAD;AAArB,CAAtB,CAAjB;AAEA,MAAMO,aAAa,GAAG,IAAIb,sBAAJ,CAA2B;AAC/Cc,EAAAA,GAAG,EAAE;AAAE,KAACR,OAAD,GAAWD;AAAb,GAD0C;AAE/CU,EAAAA,MAAM,EAAE,kCAFuC;AAG/CC,EAAAA,MAAM,EAAE,IAHuC;AAI/CC,EAAAA,eAAe,EAAEb;AAJ8B,CAA3B,CAAtB;AAOA,MAAMc,YAAY,GAAG,IAAIjB,YAAJ,CAAiB;AAAEW,EAAAA,iBAAiB,EAAE,CAACN,OAAD;AAArB,CAAjB,CAArB;AAEA,OAAO,MAAMa,gBAA4D,GAAG;AAC1E,GAACjB,cAAc,CAACkB,QAAhB,GAA2BT,QAD+C;AAE1E,GAACT,cAAc,CAACmB,aAAhB,GAAgCR,aAF0C;AAG1E,GAACX,cAAc,CAACoB,GAAhB,GAAsBJ;AAHoD,CAArE;AAMP,OAAO,MAAMK,UAAU,GAAIC,QAAD,IAAoB;AAC5C,SAAOA,QAAP;AACD,CAFM","sourcesContent":["import { InjectedConnector } from '@web3-react/injected-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { BscConnector } from '@binance-chain/bsc-connector'\nimport { ConnectorNames } from '@jazzdefi/uikit'\nimport Web3 from 'web3'\nimport getNodeUrl from './getRpcUrl'\n\nconst POLLING_INTERVAL = 12000\nconst rpcUrl = getNodeUrl()\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\n\nconst injected = new InjectedConnector({ supportedChainIds: [chainId] })\n\nconst walletconnect = new WalletConnectConnector({\n  rpc: { [chainId]: rpcUrl },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL,\n})\n\nconst bscConnector = new BscConnector({ supportedChainIds: [chainId] })\n\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\n  [ConnectorNames.Injected]: injected,\n  [ConnectorNames.WalletConnect]: walletconnect,\n  [ConnectorNames.BSC]: bscConnector,\n}\n\nexport const getLibrary = (provider): Web3 => {\n  return provider\n}\n"]},"metadata":{},"sourceType":"module"}