{"ast":null,"code":"var _jsxFileName = \"/home/drab/Documents/jazzdefi/src/views/Profile/components/ClaimGiftModal.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Modal, Text, Button, AutoRenewIcon } from \"@mozartfinance/uikit\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useToast } from \"state/hooks\";\nimport { useClaimRefundContract } from \"hooks/useContract\";\nimport useI18n from \"hooks/useI18n\";\nimport { getClaimRefundContract } from \"utils/contractHelpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const useCanClaim = () => {\n  _s();\n\n  const [canClaim, setCanClaim] = useState(false);\n  const [refresh, setRefresh] = useState(1);\n  const {\n    account\n  } = useWeb3React();\n  const checkClaimStatus = useCallback(() => {\n    setRefresh(prevRefresh => prevRefresh + 1);\n  }, [setRefresh]);\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const claimRefundContract = getClaimRefundContract();\n      const walletCanClaim = await claimRefundContract.methods.canClaim(account).call();\n      setCanClaim(walletCanClaim);\n    };\n\n    if (account) {\n      fetchClaimStatus();\n    }\n  }, [account, refresh, setCanClaim]);\n  return {\n    canClaim,\n    checkClaimStatus\n  };\n};\n\n_s(useCanClaim, \"58e0GTPAd6pKEkkvn0TNBZNJ8uI=\", false, function () {\n  return [useWeb3React];\n});\n\nconst ClaimGift = ({\n  onSuccess,\n  onDismiss\n}) => {\n  _s2();\n\n  const [isConfirming, setIsConfirming] = useState(false);\n  const {\n    account\n  } = useWeb3React();\n  const TranslateString = useI18n();\n  const {\n    canClaim\n  } = useCanClaim();\n  const claimRefundContract = useClaimRefundContract();\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n\n  const handleClick = () => {\n    claimRefundContract.methods.getCakeBack().send({\n      from: account\n    }).on(\"sending\", () => {\n      setIsConfirming(true);\n    }).on(\"receipt\", () => {\n      toastSuccess(\"Success!\");\n      onSuccess();\n      onDismiss();\n    }).on(\"error\", error => {\n      setIsConfirming(false);\n      toastError(\"Error\", error === null || error === void 0 ? void 0 : error.message);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: TranslateString(999, \"Claim your Gift!\"),\n    onDismiss: onDismiss,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: \"640px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        as: \"p\",\n        children: TranslateString(999, \"Thank you for being a day-one user of Pancake Profiles!\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        as: \"p\",\n        mb: \"8px\",\n        children: TranslateString(999, \"If you haven't already noticed, we made a mistake and the starter bunny you chose got mixed up and changed into another bunny. Oops!\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        as: \"p\",\n        children: TranslateString(999, \"To make it up to you, we'll refund you the full 4 CAKE it cost to make your bunny.\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        as: \"p\",\n        mb: \"8px\",\n        children: TranslateString(999, \"We're also preparing an all-new collectible for you to claim (for free!) in the near future.\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        as: \"p\",\n        mb: \"24px\",\n        children: TranslateString(999, \"Once you claim the refund, you can make another account with another wallet, mint a new bunny, and send it to your main account via the NFT page.\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        endIcon: isConfirming ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n          spin: true,\n          color: \"currentColor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 28\n        }, this) : null,\n        isLoading: isConfirming,\n        onClick: handleClick,\n        disabled: !canClaim,\n        children: TranslateString(999, \"Claim Your CAKE\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(ClaimGift, \"ijPV3jCt8+hqgK9hp/xOjGxWDTQ=\", false, function () {\n  return [useWeb3React, useI18n, useCanClaim, useClaimRefundContract, useToast];\n});\n\n_c = ClaimGift;\nexport default ClaimGift;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimGift\");","map":{"version":3,"sources":["/home/drab/Documents/jazzdefi/src/views/Profile/components/ClaimGiftModal.tsx"],"names":["React","useCallback","useEffect","useState","Modal","Text","Button","AutoRenewIcon","useWeb3React","useToast","useClaimRefundContract","useI18n","getClaimRefundContract","useCanClaim","canClaim","setCanClaim","refresh","setRefresh","account","checkClaimStatus","prevRefresh","fetchClaimStatus","claimRefundContract","walletCanClaim","methods","call","ClaimGift","onSuccess","onDismiss","isConfirming","setIsConfirming","TranslateString","toastSuccess","toastError","handleClick","getCakeBack","send","from","on","error","message","maxWidth"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport {\n  Modal,\n  Text,\n  InjectedModalProps,\n  Button,\n  AutoRenewIcon,\n} from \"@mozartfinance/uikit\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useToast } from \"state/hooks\";\nimport { useClaimRefundContract } from \"hooks/useContract\";\nimport useI18n from \"hooks/useI18n\";\nimport { getClaimRefundContract } from \"utils/contractHelpers\";\n\ninterface ClaimGiftProps extends InjectedModalProps {\n  onSuccess: () => void;\n}\n\nexport const useCanClaim = () => {\n  const [canClaim, setCanClaim] = useState(false);\n  const [refresh, setRefresh] = useState(1);\n  const { account } = useWeb3React();\n\n  const checkClaimStatus = useCallback(() => {\n    setRefresh((prevRefresh) => prevRefresh + 1);\n  }, [setRefresh]);\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const claimRefundContract = getClaimRefundContract();\n      const walletCanClaim = await claimRefundContract.methods\n        .canClaim(account)\n        .call();\n      setCanClaim(walletCanClaim);\n    };\n\n    if (account) {\n      fetchClaimStatus();\n    }\n  }, [account, refresh, setCanClaim]);\n\n  return { canClaim, checkClaimStatus };\n};\n\nconst ClaimGift: React.FC<ClaimGiftProps> = ({ onSuccess, onDismiss }) => {\n  const [isConfirming, setIsConfirming] = useState(false);\n  const { account } = useWeb3React();\n  const TranslateString = useI18n();\n  const { canClaim } = useCanClaim();\n  const claimRefundContract = useClaimRefundContract();\n  const { toastSuccess, toastError } = useToast();\n\n  const handleClick = () => {\n    claimRefundContract.methods\n      .getCakeBack()\n      .send({ from: account })\n      .on(\"sending\", () => {\n        setIsConfirming(true);\n      })\n      .on(\"receipt\", () => {\n        toastSuccess(\"Success!\");\n        onSuccess();\n        onDismiss();\n      })\n      .on(\"error\", (error) => {\n        setIsConfirming(false);\n        toastError(\"Error\", error?.message);\n      });\n  };\n\n  return (\n    <Modal\n      title={TranslateString(999, \"Claim your Gift!\")}\n      onDismiss={onDismiss}\n    >\n      <div style={{ maxWidth: \"640px\" }}>\n        <Text as=\"p\">\n          {TranslateString(\n            999,\n            \"Thank you for being a day-one user of Pancake Profiles!\"\n          )}\n        </Text>\n        <Text as=\"p\" mb=\"8px\">\n          {TranslateString(\n            999,\n            \"If you haven't already noticed, we made a mistake and the starter bunny you chose got mixed up and changed into another bunny. Oops!\"\n          )}\n        </Text>\n        <Text as=\"p\">\n          {TranslateString(\n            999,\n            \"To make it up to you, we'll refund you the full 4 CAKE it cost to make your bunny.\"\n          )}\n        </Text>\n        <Text as=\"p\" mb=\"8px\">\n          {TranslateString(\n            999,\n            \"We're also preparing an all-new collectible for you to claim (for free!) in the near future.\"\n          )}\n        </Text>\n        <Text as=\"p\" mb=\"24px\">\n          {TranslateString(\n            999,\n            \"Once you claim the refund, you can make another account with another wallet, mint a new bunny, and send it to your main account via the NFT page.\"\n          )}\n        </Text>\n        <Button\n          endIcon={\n            isConfirming ? <AutoRenewIcon spin color=\"currentColor\" /> : null\n          }\n          isLoading={isConfirming}\n          onClick={handleClick}\n          disabled={!canClaim}\n        >\n          {TranslateString(999, \"Claim Your CAKE\")}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default ClaimGift;\n"]},"metadata":{},"sourceType":"module"}