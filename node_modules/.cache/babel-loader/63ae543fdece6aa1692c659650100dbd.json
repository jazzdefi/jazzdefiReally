{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core';\nimport { NoBscProviderError } from '@binance-chain/bsc-connector';\nimport { NoEthereumProviderError, UserRejectedRequestError as UserRejectedRequestErrorInjected } from '@web3-react/injected-connector';\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect, WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { connectorLocalStorageKey } from '@jazzdefi/uikit';\nimport { useToast } from 'state/hooks';\nimport { connectorsByName } from 'utils/web3React';\nimport { setupNetwork } from 'utils/wallet';\n\nconst useAuth = () => {\n  _s();\n\n  const {\n    activate,\n    deactivate\n  } = useWeb3React();\n  const {\n    toastError\n  } = useToast();\n  const login = useCallback(connectorID => {\n    const connector = connectorsByName[connectorID];\n\n    if (connector) {\n      activate(connector, async error => {\n        if (error instanceof UnsupportedChainIdError) {\n          const hasSetup = await setupNetwork();\n\n          if (hasSetup) {\n            activate(connector);\n          }\n        } else {\n          window.localStorage.removeItem(connectorLocalStorageKey);\n\n          if (error instanceof NoEthereumProviderError || error instanceof NoBscProviderError) {\n            toastError('Provider Error', 'No provider was found');\n          } else if (error instanceof UserRejectedRequestErrorInjected || error instanceof UserRejectedRequestErrorWalletConnect) {\n            if (connector instanceof WalletConnectConnector) {\n              const walletConnector = connector;\n              walletConnector.walletConnectProvider = null;\n            }\n\n            toastError('Authorization Error', 'Please authorize to access your account');\n          } else {\n            toastError(error.name, error.message);\n          }\n        }\n      });\n    } else {\n      toastError(\"Can't find connector\", 'The connector config is wrong');\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  return {\n    login,\n    logout: deactivate\n  };\n};\n\n_s(useAuth, \"HBBM/IiTpYiR3hylFgynPnYq3fw=\", false, function () {\n  return [useWeb3React, useToast];\n});\n\nexport default useAuth;","map":{"version":3,"sources":["/home/drab/Documents/jazzdefi/src/hooks/useAuth.ts"],"names":["useCallback","useWeb3React","UnsupportedChainIdError","NoBscProviderError","NoEthereumProviderError","UserRejectedRequestError","UserRejectedRequestErrorInjected","UserRejectedRequestErrorWalletConnect","WalletConnectConnector","connectorLocalStorageKey","useToast","connectorsByName","setupNetwork","useAuth","activate","deactivate","toastError","login","connectorID","connector","error","hasSetup","window","localStorage","removeItem","walletConnector","walletConnectProvider","name","message","logout"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,YAAT,EAAuBC,uBAAvB,QAAsD,kBAAtD;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA,SACEC,uBADF,EAEEC,wBAAwB,IAAIC,gCAF9B,QAGO,gCAHP;AAIA,SACED,wBAAwB,IAAIE,qCAD9B,EAEEC,sBAFF,QAGO,qCAHP;AAIA,SAAyBC,wBAAzB,QAAyD,iBAAzD;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,SAASC,YAAT,QAA6B,cAA7B;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA2Bd,YAAY,EAA7C;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAiBN,QAAQ,EAA/B;AAEA,QAAMO,KAAK,GAAGjB,WAAW,CAAEkB,WAAD,IAAiC;AACzD,UAAMC,SAAS,GAAGR,gBAAgB,CAACO,WAAD,CAAlC;;AACA,QAAIC,SAAJ,EAAe;AACbL,MAAAA,QAAQ,CAACK,SAAD,EAAY,MAAOC,KAAP,IAAwB;AAC1C,YAAIA,KAAK,YAAYlB,uBAArB,EAA8C;AAC5C,gBAAMmB,QAAQ,GAAG,MAAMT,YAAY,EAAnC;;AACA,cAAIS,QAAJ,EAAc;AACZP,YAAAA,QAAQ,CAACK,SAAD,CAAR;AACD;AACF,SALD,MAKO;AACLG,UAAAA,MAAM,CAACC,YAAP,CAAoBC,UAApB,CAA+Bf,wBAA/B;;AACA,cAAIW,KAAK,YAAYhB,uBAAjB,IAA4CgB,KAAK,YAAYjB,kBAAjE,EAAqF;AACnFa,YAAAA,UAAU,CAAC,gBAAD,EAAmB,uBAAnB,CAAV;AACD,WAFD,MAEO,IACLI,KAAK,YAAYd,gCAAjB,IACAc,KAAK,YAAYb,qCAFZ,EAGL;AACA,gBAAIY,SAAS,YAAYX,sBAAzB,EAAiD;AAC/C,oBAAMiB,eAAe,GAAGN,SAAxB;AACAM,cAAAA,eAAe,CAACC,qBAAhB,GAAwC,IAAxC;AACD;;AACDV,YAAAA,UAAU,CAAC,qBAAD,EAAwB,yCAAxB,CAAV;AACD,WATM,MASA;AACLA,YAAAA,UAAU,CAACI,KAAK,CAACO,IAAP,EAAaP,KAAK,CAACQ,OAAnB,CAAV;AACD;AACF;AACF,OAvBO,CAAR;AAwBD,KAzBD,MAyBO;AACLZ,MAAAA,UAAU,CAAC,sBAAD,EAAyB,+BAAzB,CAAV;AACD,KA7BwD,CA8BzD;;AACD,GA/BwB,EA+BtB,EA/BsB,CAAzB;AAiCA,SAAO;AAAEC,IAAAA,KAAF;AAASY,IAAAA,MAAM,EAAEd;AAAjB,GAAP;AACD,CAtCD;;GAAMF,O;UAC6BZ,Y,EACVS,Q;;;AAsCzB,eAAeG,OAAf","sourcesContent":["import { useCallback } from 'react'\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core'\nimport { NoBscProviderError } from '@binance-chain/bsc-connector'\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected,\n} from '@web3-react/injected-connector'\nimport {\n  UserRejectedRequestError as UserRejectedRequestErrorWalletConnect,\n  WalletConnectConnector,\n} from '@web3-react/walletconnect-connector'\nimport { ConnectorNames, connectorLocalStorageKey } from '@jazzdefi/uikit'\nimport { useToast } from 'state/hooks'\nimport { connectorsByName } from 'utils/web3React'\nimport { setupNetwork } from 'utils/wallet'\n\nconst useAuth = () => {\n  const { activate, deactivate } = useWeb3React()\n  const { toastError } = useToast()\n\n  const login = useCallback((connectorID: ConnectorNames) => {\n    const connector = connectorsByName[connectorID]\n    if (connector) {\n      activate(connector, async (error: Error) => {\n        if (error instanceof UnsupportedChainIdError) {\n          const hasSetup = await setupNetwork()\n          if (hasSetup) {\n            activate(connector)\n          }\n        } else {\n          window.localStorage.removeItem(connectorLocalStorageKey)\n          if (error instanceof NoEthereumProviderError || error instanceof NoBscProviderError) {\n            toastError('Provider Error', 'No provider was found')\n          } else if (\n            error instanceof UserRejectedRequestErrorInjected ||\n            error instanceof UserRejectedRequestErrorWalletConnect\n          ) {\n            if (connector instanceof WalletConnectConnector) {\n              const walletConnector = connector as WalletConnectConnector\n              walletConnector.walletConnectProvider = null\n            }\n            toastError('Authorization Error', 'Please authorize to access your account')\n          } else {\n            toastError(error.name, error.message)\n          }\n        }\n      })\n    } else {\n      toastError(\"Can't find connector\", 'The connector config is wrong')\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return { login, logout: deactivate }\n}\n\nexport default useAuth\n"]},"metadata":{},"sourceType":"module"}