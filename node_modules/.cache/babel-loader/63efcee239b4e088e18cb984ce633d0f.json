{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport BigNumber from \"bignumber.js\";\nimport { BSC_BLOCK_TIME } from \"config\";\nimport { useBlock } from \"state/hooks\";\nimport { useIfoContract } from \"hooks/useContract\";\nimport { useEffect, useState } from \"react\";\nimport makeBatchRequest from \"utils/makeBatchRequest\";\n\nconst getStatus = (currentBlock, startBlock, endBlock) => {\n  // Add an extra check to currentBlock because it takes awhile to fetch so the initial value is 0\n  // making the UI change to an inaccurate status\n  if (currentBlock === 0) {\n    return \"idle\";\n  }\n\n  if (currentBlock < startBlock) {\n    return \"coming_soon\";\n  }\n\n  if (currentBlock >= startBlock && currentBlock <= endBlock) {\n    return \"live\";\n  }\n\n  if (currentBlock > endBlock) {\n    return \"finished\";\n  }\n\n  return \"idle\";\n};\n/**\n * Gets all public data of an IFO\n */\n\n\nconst useGetPublicIfoData = ifo => {\n  _s();\n\n  const {\n    address,\n    releaseBlockNumber\n  } = ifo;\n  const [state, setState] = useState({\n    status: \"idle\",\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    raisingAmount: new BigNumber(0),\n    totalAmount: new BigNumber(0),\n    startBlockNum: 0,\n    endBlockNum: 0\n  });\n  const {\n    currentBlock\n  } = useBlock();\n  const contract = useIfoContract(address);\n  useEffect(() => {\n    const fetchProgress = async () => {\n      const [startBlock, endBlock, raisingAmount, totalAmount] = await makeBatchRequest([contract.methods.startBlock().call, contract.methods.endBlock().call, contract.methods.raisingAmount().call, contract.methods.totalAmount().call]);\n      const startBlockNum = parseInt(startBlock, 10);\n      const endBlockNum = parseInt(endBlock, 10);\n      const status = getStatus(currentBlock, startBlockNum, endBlockNum);\n      const totalBlocks = endBlockNum - startBlockNum;\n      const blocksRemaining = endBlockNum - currentBlock; // Calculate the total progress until finished or until start\n\n      const progress = currentBlock > startBlockNum ? (currentBlock - startBlockNum) / totalBlocks * 100 : (currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber) * 100;\n      setState({\n        secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n        secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n        raisingAmount: new BigNumber(raisingAmount),\n        totalAmount: new BigNumber(totalAmount),\n        status,\n        progress,\n        blocksRemaining,\n        startBlockNum,\n        endBlockNum\n      });\n    };\n\n    fetchProgress();\n  }, [address, currentBlock, contract, releaseBlockNumber, setState]);\n  return state;\n};\n\n_s(useGetPublicIfoData, \"l4JbaYM3evvHan0aaVff5oqJaoc=\", false, function () {\n  return [useBlock, useIfoContract];\n});\n\nexport default useGetPublicIfoData;","map":{"version":3,"sources":["/home/drab/Documents/jazzdefi/src/hooks/useGetPublicIfoData.ts"],"names":["BigNumber","BSC_BLOCK_TIME","useBlock","useIfoContract","useEffect","useState","makeBatchRequest","getStatus","currentBlock","startBlock","endBlock","useGetPublicIfoData","ifo","address","releaseBlockNumber","state","setState","status","blocksRemaining","secondsUntilStart","progress","secondsUntilEnd","raisingAmount","totalAmount","startBlockNum","endBlockNum","contract","fetchProgress","methods","call","parseInt","totalBlocks"],"mappings":"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","sourcesContent":["import BigNumber from \"bignumber.js\";\nimport { BSC_BLOCK_TIME } from \"config\";\nimport { Ifo, IfoStatus } from \"config/constants/types\";\nimport { useBlock } from \"state/hooks\";\nimport { useIfoContract } from \"hooks/useContract\";\nimport { useEffect, useState } from \"react\";\nimport makeBatchRequest from \"utils/makeBatchRequest\";\n\nexport interface PublicIfoState {\n  status: IfoStatus;\n  blocksRemaining: number;\n  secondsUntilStart: number;\n  progress: number;\n  secondsUntilEnd: number;\n  raisingAmount: BigNumber;\n  totalAmount: BigNumber;\n  startBlockNum: number;\n  endBlockNum: number;\n}\n\nconst getStatus = (\n  currentBlock: number,\n  startBlock: number,\n  endBlock: number\n): IfoStatus => {\n  // Add an extra check to currentBlock because it takes awhile to fetch so the initial value is 0\n  // making the UI change to an inaccurate status\n  if (currentBlock === 0) {\n    return \"idle\";\n  }\n\n  if (currentBlock < startBlock) {\n    return \"coming_soon\";\n  }\n\n  if (currentBlock >= startBlock && currentBlock <= endBlock) {\n    return \"live\";\n  }\n\n  if (currentBlock > endBlock) {\n    return \"finished\";\n  }\n\n  return \"idle\";\n};\n\n/**\n * Gets all public data of an IFO\n */\nconst useGetPublicIfoData = (ifo: Ifo) => {\n  const { address, releaseBlockNumber } = ifo;\n  const [state, setState] = useState<PublicIfoState>({\n    status: \"idle\",\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    raisingAmount: new BigNumber(0),\n    totalAmount: new BigNumber(0),\n    startBlockNum: 0,\n    endBlockNum: 0,\n  });\n  const { currentBlock } = useBlock();\n  const contract = useIfoContract(address);\n\n  useEffect(() => {\n    const fetchProgress = async () => {\n      const [\n        startBlock,\n        endBlock,\n        raisingAmount,\n        totalAmount,\n      ] = (await makeBatchRequest([\n        contract.methods.startBlock().call,\n        contract.methods.endBlock().call,\n        contract.methods.raisingAmount().call,\n        contract.methods.totalAmount().call,\n      ])) as [string, string, string, string];\n\n      const startBlockNum = parseInt(startBlock, 10);\n      const endBlockNum = parseInt(endBlock, 10);\n\n      const status = getStatus(currentBlock, startBlockNum, endBlockNum);\n      const totalBlocks = endBlockNum - startBlockNum;\n      const blocksRemaining = endBlockNum - currentBlock;\n\n      // Calculate the total progress until finished or until start\n      const progress =\n        currentBlock > startBlockNum\n          ? ((currentBlock - startBlockNum) / totalBlocks) * 100\n          : ((currentBlock - releaseBlockNumber) /\n              (startBlockNum - releaseBlockNumber)) *\n            100;\n\n      setState({\n        secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n        secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n        raisingAmount: new BigNumber(raisingAmount),\n        totalAmount: new BigNumber(totalAmount),\n        status,\n        progress,\n        blocksRemaining,\n        startBlockNum,\n        endBlockNum,\n      });\n    };\n\n    fetchProgress();\n  }, [address, currentBlock, contract, releaseBlockNumber, setState]);\n\n  return state;\n};\n\nexport default useGetPublicIfoData;\n"]},"metadata":{},"sourceType":"module"}