{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport BigNumber from \"bignumber.js\";\nimport { useERC20, useIfoContract } from \"hooks/useContract\";\nimport { useIfoAllowance } from \"hooks/useAllowance\";\nimport makeBatchRequest from \"utils/makeBatchRequest\";\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = ifo => {\n  _s();\n\n  const [state, setState] = useState({\n    isPendingTx: false,\n    offeringTokenBalance: new BigNumber(0),\n    refundingAmount: new BigNumber(0),\n    userInfo: {\n      amount: new BigNumber(0),\n      claimed: false\n    }\n  });\n  const {\n    address,\n    currencyAddress\n  } = ifo;\n  const {\n    isPendingTx\n  } = state;\n  const {\n    account\n  } = useWeb3React();\n  const contract = useIfoContract(address);\n  const currencyContract = useERC20(currencyAddress);\n  const allowance = useIfoAllowance(currencyContract, address, isPendingTx);\n\n  const setPendingTx = status => setState(prevState => ({ ...prevState,\n    isPendingTx: status\n  }));\n\n  const addUserContributedAmount = amount => {\n    setState(prevState => ({ ...prevState,\n      userInfo: { ...prevState.userInfo,\n        amount: prevState.userInfo.amount.plus(amount)\n      }\n    }));\n  };\n\n  const setIsClaimed = () => {\n    setState(prevState => ({ ...prevState,\n      userInfo: { ...prevState.userInfo,\n        claimed: true\n      }\n    }));\n  };\n\n  useEffect(() => {\n    const fetchIfoData = async () => {\n      const [offeringAmount, userInfoResponse, refundingAmount] = await makeBatchRequest([contract.methods.getOfferingAmount(account).call, contract.methods.userInfo(account).call, contract.methods.getRefundingAmount(account).call]);\n      setState(prevState => ({ ...prevState,\n        offeringTokenBalance: new BigNumber(offeringAmount),\n        refundingAmount: new BigNumber(refundingAmount),\n        userInfo: {\n          amount: new BigNumber(userInfoResponse.amount),\n          claimed: userInfoResponse.claimed\n        }\n      }));\n    };\n\n    if (account) {\n      fetchIfoData();\n    }\n  }, [account, contract, setState]);\n  return { ...state,\n    allowance,\n    contract,\n    setPendingTx,\n    addUserContributedAmount,\n    setIsClaimed\n  };\n};\n\n_s(useGetWalletIfoData, \"louT9pByRon7hF8FgWsQLdTUB7k=\", false, function () {\n  return [useWeb3React, useIfoContract, useERC20, useIfoAllowance];\n});\n\nexport default useGetWalletIfoData;","map":{"version":3,"sources":["/home/drab/Documents/jazzdefi/src/hooks/useGetWalletIfoData.ts"],"names":["useEffect","useState","useWeb3React","BigNumber","useERC20","useIfoContract","useIfoAllowance","makeBatchRequest","useGetWalletIfoData","ifo","state","setState","isPendingTx","offeringTokenBalance","refundingAmount","userInfo","amount","claimed","address","currencyAddress","account","contract","currencyContract","allowance","setPendingTx","status","prevState","addUserContributedAmount","plus","setIsClaimed","fetchIfoData","offeringAmount","userInfoResponse","methods","getOfferingAmount","call","getRefundingAmount"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport BigNumber from \"bignumber.js\";\nimport { Ifo } from \"config/constants/types\";\nimport { useERC20, useIfoContract } from \"hooks/useContract\";\nimport { useIfoAllowance } from \"hooks/useAllowance\";\nimport makeBatchRequest from \"utils/makeBatchRequest\";\n\nexport interface UserInfo {\n  amount: BigNumber;\n  claimed: boolean;\n}\n\nexport interface WalletIfoState {\n  isPendingTx: boolean;\n  offeringTokenBalance: BigNumber;\n  refundingAmount: BigNumber;\n  userInfo: UserInfo;\n}\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = (ifo: Ifo) => {\n  const [state, setState] = useState<WalletIfoState>({\n    isPendingTx: false,\n    offeringTokenBalance: new BigNumber(0),\n    refundingAmount: new BigNumber(0),\n    userInfo: {\n      amount: new BigNumber(0),\n      claimed: false,\n    },\n  });\n\n  const { address, currencyAddress } = ifo;\n  const { isPendingTx } = state;\n\n  const { account } = useWeb3React();\n  const contract = useIfoContract(address);\n  const currencyContract = useERC20(currencyAddress);\n  const allowance = useIfoAllowance(currencyContract, address, isPendingTx);\n\n  const setPendingTx = (status: boolean) =>\n    setState((prevState) => ({\n      ...prevState,\n      isPendingTx: status,\n    }));\n\n  const addUserContributedAmount = (amount: BigNumber) => {\n    setState((prevState) => ({\n      ...prevState,\n      userInfo: {\n        ...prevState.userInfo,\n        amount: prevState.userInfo.amount.plus(amount),\n      },\n    }));\n  };\n\n  const setIsClaimed = () => {\n    setState((prevState) => ({\n      ...prevState,\n      userInfo: {\n        ...prevState.userInfo,\n        claimed: true,\n      },\n    }));\n  };\n\n  useEffect(() => {\n    const fetchIfoData = async () => {\n      const [\n        offeringAmount,\n        userInfoResponse,\n        refundingAmount,\n      ] = (await makeBatchRequest([\n        contract.methods.getOfferingAmount(account).call,\n        contract.methods.userInfo(account).call,\n        contract.methods.getRefundingAmount(account).call,\n      ])) as [string, UserInfo, string];\n\n      setState((prevState) => ({\n        ...prevState,\n        offeringTokenBalance: new BigNumber(offeringAmount),\n        refundingAmount: new BigNumber(refundingAmount),\n        userInfo: {\n          amount: new BigNumber(userInfoResponse.amount),\n          claimed: userInfoResponse.claimed,\n        },\n      }));\n    };\n\n    if (account) {\n      fetchIfoData();\n    }\n  }, [account, contract, setState]);\n\n  return {\n    ...state,\n    allowance,\n    contract,\n    setPendingTx,\n    addUserContributedAmount,\n    setIsClaimed,\n  };\n};\n\nexport default useGetWalletIfoData;\n"]},"metadata":{},"sourceType":"module"}