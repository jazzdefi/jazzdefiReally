{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport { getProfileContract } from \"utils/contractHelpers\";\nimport makeBatchRequest from \"utils/makeBatchRequest\";\nimport { useToast } from \"state/hooks\";\n\nconst useGetProfileCosts = () => {\n  _s();\n\n  const [costs, setCosts] = useState({\n    numberCakeToReactivate: new BigNumber(0),\n    numberCakeToRegister: new BigNumber(0),\n    numberCakeToUpdate: new BigNumber(0)\n  });\n  const {\n    toastError\n  } = useToast();\n  useEffect(() => {\n    const fetchCosts = async () => {\n      try {\n        const profileContract = getProfileContract();\n        const [numberCakeToReactivate, numberCakeToRegister, numberCakeToUpdate] = await makeBatchRequest([profileContract.methods.numberCakeToReactivate().call, profileContract.methods.numberCakeToRegister().call, profileContract.methods.numberCakeToUpdate().call]);\n        setCosts({\n          numberCakeToReactivate: new BigNumber(numberCakeToReactivate),\n          numberCakeToRegister: new BigNumber(numberCakeToRegister),\n          numberCakeToUpdate: new BigNumber(numberCakeToUpdate)\n        });\n      } catch (error) {\n        toastError(\"Error\", \"Could not retrieve CAKE costs for profile\");\n      }\n    };\n\n    fetchCosts();\n  }, [setCosts, toastError]);\n  return costs;\n};\n\n_s(useGetProfileCosts, \"1OI2vSRQfB6an3qoZQfLnc0xCss=\", false, function () {\n  return [useToast];\n});\n\nexport default useGetProfileCosts;","map":{"version":3,"sources":["/home/drab/Documents/jazzdefi/src/hooks/useGetProfileCosts.ts"],"names":["useEffect","useState","BigNumber","getProfileContract","makeBatchRequest","useToast","useGetProfileCosts","costs","setCosts","numberCakeToReactivate","numberCakeToRegister","numberCakeToUpdate","toastError","fetchCosts","profileContract","methods","call","error"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,OAAOC,gBAAP,MAA6B,wBAA7B;AACA,SAASC,QAAT,QAAyB,aAAzB;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAAA;;AAC/B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC;AACjCQ,IAAAA,sBAAsB,EAAE,IAAIP,SAAJ,CAAc,CAAd,CADS;AAEjCQ,IAAAA,oBAAoB,EAAE,IAAIR,SAAJ,CAAc,CAAd,CAFW;AAGjCS,IAAAA,kBAAkB,EAAE,IAAIT,SAAJ,CAAc,CAAd;AAHa,GAAD,CAAlC;AAKA,QAAM;AAAEU,IAAAA;AAAF,MAAiBP,QAAQ,EAA/B;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,UAAU,GAAG,YAAY;AAC7B,UAAI;AACF,cAAMC,eAAe,GAAGX,kBAAkB,EAA1C;AACA,cAAM,CACJM,sBADI,EAEJC,oBAFI,EAGJC,kBAHI,IAIF,MAAMP,gBAAgB,CAAC,CACzBU,eAAe,CAACC,OAAhB,CAAwBN,sBAAxB,GAAiDO,IADxB,EAEzBF,eAAe,CAACC,OAAhB,CAAwBL,oBAAxB,GAA+CM,IAFtB,EAGzBF,eAAe,CAACC,OAAhB,CAAwBJ,kBAAxB,GAA6CK,IAHpB,CAAD,CAJ1B;AAUAR,QAAAA,QAAQ,CAAC;AACPC,UAAAA,sBAAsB,EAAE,IAAIP,SAAJ,CACtBO,sBADsB,CADjB;AAIPC,UAAAA,oBAAoB,EAAE,IAAIR,SAAJ,CAAcQ,oBAAd,CAJf;AAKPC,UAAAA,kBAAkB,EAAE,IAAIT,SAAJ,CAAcS,kBAAd;AALb,SAAD,CAAR;AAOD,OAnBD,CAmBE,OAAOM,KAAP,EAAc;AACdL,QAAAA,UAAU,CAAC,OAAD,EAAU,2CAAV,CAAV;AACD;AACF,KAvBD;;AAyBAC,IAAAA,UAAU;AACX,GA3BQ,EA2BN,CAACL,QAAD,EAAWI,UAAX,CA3BM,CAAT;AA6BA,SAAOL,KAAP;AACD,CAtCD;;GAAMD,kB;UAMmBD,Q;;;AAkCzB,eAAeC,kBAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport { getProfileContract } from \"utils/contractHelpers\";\nimport makeBatchRequest from \"utils/makeBatchRequest\";\nimport { useToast } from \"state/hooks\";\n\nconst useGetProfileCosts = () => {\n  const [costs, setCosts] = useState({\n    numberCakeToReactivate: new BigNumber(0),\n    numberCakeToRegister: new BigNumber(0),\n    numberCakeToUpdate: new BigNumber(0),\n  });\n  const { toastError } = useToast();\n\n  useEffect(() => {\n    const fetchCosts = async () => {\n      try {\n        const profileContract = getProfileContract();\n        const [\n          numberCakeToReactivate,\n          numberCakeToRegister,\n          numberCakeToUpdate,\n        ] = await makeBatchRequest([\n          profileContract.methods.numberCakeToReactivate().call,\n          profileContract.methods.numberCakeToRegister().call,\n          profileContract.methods.numberCakeToUpdate().call,\n        ]);\n\n        setCosts({\n          numberCakeToReactivate: new BigNumber(\n            numberCakeToReactivate as string\n          ),\n          numberCakeToRegister: new BigNumber(numberCakeToRegister as string),\n          numberCakeToUpdate: new BigNumber(numberCakeToUpdate as string),\n        });\n      } catch (error) {\n        toastError(\"Error\", \"Could not retrieve CAKE costs for profile\");\n      }\n    };\n\n    fetchCosts();\n  }, [setCosts, toastError]);\n\n  return costs;\n};\n\nexport default useGetProfileCosts;\n"]},"metadata":{},"sourceType":"module"}