{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWeb3React } from '@web3-react/core';\nimport { getLotteryAddress } from 'utils/addressHelpers';\nimport { useCake } from './useContract';\nimport useRefresh from './useRefresh'; // Retrieve lottery allowance\n\nexport const useLotteryAllowance = () => {\n  _s();\n\n  const [allowance, setAllowance] = useState(new BigNumber(0));\n  const {\n    account\n  } = useWeb3React();\n  const cakeContract = useCake();\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await cakeContract.methods.allowance(account, getLotteryAddress()).call();\n      setAllowance(new BigNumber(res));\n    };\n\n    if (account) {\n      fetchAllowance();\n    }\n  }, [account, cakeContract, fastRefresh]);\n  return allowance;\n}; // Retrieve IFO allowance\n\n_s(useLotteryAllowance, \"Kz+Ir0O/tnZiccPOZR3Hs1fQMZI=\", false, function () {\n  return [useWeb3React, useCake, useRefresh];\n});\n\nexport const useIfoAllowance = (tokenContract, spenderAddress, dependency) => {\n  _s2();\n\n  const {\n    account\n  } = useWeb3React();\n  const [allowance, setAllowance] = useState(new BigNumber(0));\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call();\n        setAllowance(new BigNumber(res));\n      } catch (e) {\n        console.error(e);\n      }\n    };\n\n    fetch();\n  }, [account, spenderAddress, tokenContract, dependency]);\n  return allowance;\n};\n\n_s2(useIfoAllowance, \"6J7D6XN/XkrOfDkiuSfDCLjTIr8=\", false, function () {\n  return [useWeb3React];\n});","map":{"version":3,"sources":["/home/drab/Documents/jazzdefi/src/hooks/useAllowance.ts"],"names":["useEffect","useState","BigNumber","useWeb3React","getLotteryAddress","useCake","useRefresh","useLotteryAllowance","allowance","setAllowance","account","cakeContract","fastRefresh","fetchAllowance","res","methods","call","useIfoAllowance","tokenContract","spenderAddress","dependency","fetch","e","console","error"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AAEA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAEA;;AACA,OAAO,MAAMC,mBAAmB,GAAG,MAAM;AAAA;;AACvC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,IAAIC,SAAJ,CAAc,CAAd,CAAD,CAA1C;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAcP,YAAY,EAAhC;AACA,QAAMQ,YAAY,GAAGN,OAAO,EAA5B;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAkBN,UAAU,EAAlC;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,cAAc,GAAG,YAAY;AACjC,YAAMC,GAAG,GAAG,MAAMH,YAAY,CAACI,OAAb,CAAqBP,SAArB,CAA+BE,OAA/B,EAAwCN,iBAAiB,EAAzD,EAA6DY,IAA7D,EAAlB;AACAP,MAAAA,YAAY,CAAC,IAAIP,SAAJ,CAAcY,GAAd,CAAD,CAAZ;AACD,KAHD;;AAKA,QAAIJ,OAAJ,EAAa;AACXG,MAAAA,cAAc;AACf;AACF,GATQ,EASN,CAACH,OAAD,EAAUC,YAAV,EAAwBC,WAAxB,CATM,CAAT;AAWA,SAAOJ,SAAP;AACD,CAlBM,C,CAoBP;;GApBaD,mB;UAESJ,Y,EACCE,O,EACGC,U;;;AAiB1B,OAAO,MAAMW,eAAe,GAAG,CAACC,aAAD,EAA0BC,cAA1B,EAAkDC,UAAlD,KAAkF;AAAA;;AAC/G,QAAM;AAAEV,IAAAA;AAAF,MAAcP,YAAY,EAAhC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,IAAIC,SAAJ,CAAc,CAAd,CAAD,CAA1C;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqB,KAAK,GAAG,YAAY;AACxB,UAAI;AACF,cAAMP,GAAG,GAAG,MAAMI,aAAa,CAACH,OAAd,CAAsBP,SAAtB,CAAgCE,OAAhC,EAAyCS,cAAzC,EAAyDH,IAAzD,EAAlB;AACAP,QAAAA,YAAY,CAAC,IAAIP,SAAJ,CAAcY,GAAd,CAAD,CAAZ;AACD,OAHD,CAGE,OAAOQ,CAAP,EAAU;AACVC,QAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;AACF,KAPD;;AAQAD,IAAAA,KAAK;AACN,GAVQ,EAUN,CAACX,OAAD,EAAUS,cAAV,EAA0BD,aAA1B,EAAyCE,UAAzC,CAVM,CAAT;AAYA,SAAOZ,SAAP;AACD,CAjBM;;IAAMS,e;UACSd,Y","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { getLotteryAddress } from 'utils/addressHelpers'\nimport { useCake } from './useContract'\nimport useRefresh from './useRefresh'\n\n// Retrieve lottery allowance\nexport const useLotteryAllowance = () => {\n  const [allowance, setAllowance] = useState(new BigNumber(0))\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await cakeContract.methods.allowance(account, getLotteryAddress()).call()\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchAllowance()\n    }\n  }, [account, cakeContract, fastRefresh])\n\n  return allowance\n}\n\n// Retrieve IFO allowance\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any): BigNumber => {\n  const { account } = useWeb3React()\n  const [allowance, setAllowance] = useState(new BigNumber(0))\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        console.error(e)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n"]},"metadata":{},"sourceType":"module"}