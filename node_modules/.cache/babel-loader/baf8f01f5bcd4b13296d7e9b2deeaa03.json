{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useEffect, useReducer } from \"react\";\nimport { getPancakeRabbitContract } from \"utils/contractHelpers\";\nimport makeBatchRequest from \"utils/makeBatchRequest\";\nconst pancakeRabbitsContract = getPancakeRabbitContract();\nconst initialState = {\n  isLoading: true,\n  nfts: {},\n  lastUpdated: Date.now()\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"set_nfts\":\n      return { ...initialState,\n        isLoading: false,\n        nfts: action.data\n      };\n\n    case \"refresh\":\n      return { ...initialState,\n        lastUpdated: action.timestamp\n      };\n\n    case \"reset\":\n      return { ...initialState,\n        isLoading: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst useGetWalletNfts = () => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const {\n    account\n  } = useWeb3React();\n  const {\n    lastUpdated\n  } = state;\n  useEffect(() => {\n    const fetchNfts = async () => {\n      try {\n        const balanceOf = await pancakeRabbitsContract.methods.balanceOf(account).call();\n\n        if (balanceOf > 0) {\n          let nfts = {};\n\n          const getTokenIdAndBunnyId = async index => {\n            try {\n              const {\n                tokenOfOwnerByIndex,\n                getBunnyId,\n                tokenURI\n              } = pancakeRabbitsContract.methods;\n              const tokenId = await tokenOfOwnerByIndex(account, index).call();\n              const [bunnyId, tokenUri] = await makeBatchRequest([getBunnyId(tokenId).call, tokenURI(tokenId).call]);\n              return [Number(bunnyId), Number(tokenId), tokenUri];\n            } catch (error) {\n              return null;\n            }\n          };\n\n          const tokenIdPromises = [];\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i));\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises);\n          nfts = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum;\n            }\n\n            const [bunnyId, tokenId, tokenUri] = association;\n            return { ...accum,\n              [bunnyId]: {\n                tokenUri,\n                tokenIds: accum[bunnyId] ? [...accum[bunnyId].tokenIds, tokenId] : [tokenId]\n              }\n            };\n          }, {});\n          dispatch({\n            type: \"set_nfts\",\n            data: nfts\n          });\n        } else {\n          // Reset it in case of wallet change\n          dispatch({\n            type: \"reset\"\n          });\n        }\n      } catch (error) {\n        dispatch({\n          type: \"reset\"\n        });\n      }\n    };\n\n    if (account) {\n      fetchNfts();\n    }\n  }, [account, lastUpdated, dispatch]);\n\n  const refresh = () => dispatch({\n    type: \"refresh\",\n    timestamp: Date.now()\n  });\n\n  return { ...state,\n    refresh\n  };\n};\n\n_s(useGetWalletNfts, \"Fw+KKwbJZCo3UDpDs5aQ+PFxWuQ=\", false, function () {\n  return [useWeb3React];\n});\n\nexport default useGetWalletNfts;","map":{"version":3,"sources":["/home/drab/Documents/jazzdefi/src/hooks/useGetWalletNfts.ts"],"names":["useWeb3React","useEffect","useReducer","getPancakeRabbitContract","makeBatchRequest","pancakeRabbitsContract","initialState","isLoading","nfts","lastUpdated","Date","now","reducer","state","action","type","data","timestamp","useGetWalletNfts","dispatch","account","fetchNfts","balanceOf","methods","call","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","getBunnyId","tokenURI","tokenId","bunnyId","tokenUri","Number","error","tokenIdPromises","i","push","tokenIdsOwnedByWallet","Promise","all","reduce","accum","association","tokenIds","refresh"],"mappings":"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","sourcesContent":["import { useWeb3React } from \"@web3-react/core\";\nimport { useEffect, useReducer } from \"react\";\nimport { getPancakeRabbitContract } from \"utils/contractHelpers\";\nimport makeBatchRequest from \"utils/makeBatchRequest\";\n\nconst pancakeRabbitsContract = getPancakeRabbitContract();\n\nexport type NftMap = {\n  [key: number]: {\n    tokenUri: string;\n    tokenIds: number[];\n  };\n};\n\ntype Action =\n  | { type: \"set_nfts\"; data: NftMap }\n  | { type: \"reset\" }\n  | { type: \"refresh\"; timestamp: number };\n\ntype State = {\n  isLoading: boolean;\n  nfts: NftMap;\n  lastUpdated: number;\n};\n\nconst initialState: State = {\n  isLoading: true,\n  nfts: {},\n  lastUpdated: Date.now(),\n};\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case \"set_nfts\":\n      return {\n        ...initialState,\n        isLoading: false,\n        nfts: action.data,\n      };\n    case \"refresh\":\n      return {\n        ...initialState,\n        lastUpdated: action.timestamp,\n      };\n    case \"reset\":\n      return {\n        ...initialState,\n        isLoading: false,\n      };\n    default:\n      return state;\n  }\n};\n\nconst useGetWalletNfts = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const { account } = useWeb3React();\n  const { lastUpdated } = state;\n\n  useEffect(() => {\n    const fetchNfts = async () => {\n      try {\n        const balanceOf = await pancakeRabbitsContract.methods\n          .balanceOf(account)\n          .call();\n\n        if (balanceOf > 0) {\n          let nfts: NftMap = {};\n\n          const getTokenIdAndBunnyId = async (index: number) => {\n            try {\n              const {\n                tokenOfOwnerByIndex,\n                getBunnyId,\n                tokenURI,\n              } = pancakeRabbitsContract.methods;\n              const tokenId = await tokenOfOwnerByIndex(account, index).call();\n              const [bunnyId, tokenUri] = await makeBatchRequest([\n                getBunnyId(tokenId).call,\n                tokenURI(tokenId).call,\n              ]);\n\n              return [Number(bunnyId), Number(tokenId), tokenUri];\n            } catch (error) {\n              return null;\n            }\n          };\n\n          const tokenIdPromises = [];\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i));\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises);\n\n          nfts = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum;\n            }\n\n            const [bunnyId, tokenId, tokenUri] = association;\n\n            return {\n              ...accum,\n              [bunnyId]: {\n                tokenUri,\n                tokenIds: accum[bunnyId]\n                  ? [...accum[bunnyId].tokenIds, tokenId]\n                  : [tokenId],\n              },\n            };\n          }, {});\n\n          dispatch({ type: \"set_nfts\", data: nfts });\n        } else {\n          // Reset it in case of wallet change\n          dispatch({ type: \"reset\" });\n        }\n      } catch (error) {\n        dispatch({ type: \"reset\" });\n      }\n    };\n\n    if (account) {\n      fetchNfts();\n    }\n  }, [account, lastUpdated, dispatch]);\n\n  const refresh = () => dispatch({ type: \"refresh\", timestamp: Date.now() });\n\n  return { ...state, refresh };\n};\n\nexport default useGetWalletNfts;\n"]},"metadata":{},"sourceType":"module"}