{"ast":null,"code":"var _jsxFileName = \"/home/drab/Documents/jazzdefi/src/views/Collectibles/components/NftList.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport orderBy from \"lodash/orderBy\";\nimport nfts from \"config/constants/nfts\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { getBunnySpecialContract } from \"utils/contractHelpers\";\nimport useGetWalletNfts from \"hooks/useGetWalletNfts\";\nimport makeBatchRequest from \"utils/makeBatchRequest\";\nimport { useToast } from \"state/hooks\";\nimport NftCard from \"./NftCard\";\nimport NftGrid from \"./NftGrid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst bunnySpecialContract = getBunnySpecialContract();\n\nconst NftList = () => {\n  _s();\n\n  const [claimableNfts, setClaimableNfts] = useState({});\n  const {\n    nfts: nftTokenIds,\n    refresh\n  } = useGetWalletNfts();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    toastError\n  } = useToast();\n  const fetchClaimableStatuses = useCallback(async walletAddress => {\n    try {\n      const claimStatuses = await makeBatchRequest(nfts.map(nft => {\n        return bunnySpecialContract.methods.canClaimSingle(walletAddress, nft.bunnyId).call;\n      }));\n      setClaimableNfts(claimStatuses.reduce((accum, claimStatus, index) => {\n        return { ...accum,\n          [nfts[index].bunnyId]: claimStatus\n        };\n      }, {}));\n    } catch (error) {\n      console.error(error);\n      toastError(\"Error checking NFT claimable status\");\n    }\n  }, [setClaimableNfts, toastError]);\n\n  const handleSuccess = () => {\n    refresh();\n    fetchClaimableStatuses(account);\n  };\n\n  useEffect(() => {\n    if (account) {\n      fetchClaimableStatuses(account);\n    }\n  }, [account, fetchClaimableStatuses]);\n  return /*#__PURE__*/_jsxDEV(NftGrid, {\n    children: orderBy(nfts, \"sortOrder\").map(nft => {\n      const tokenIds = nftTokenIds[nft.bunnyId] ? nftTokenIds[nft.bunnyId].tokenIds : [];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(NftCard, {\n          nft: nft,\n          canClaim: claimableNfts[nft.bunnyId],\n          tokenIds: tokenIds,\n          onSuccess: handleSuccess\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)\n      }, nft.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NftList, \"lg7A8FHtWLVrEq3847puNNbBJ8c=\", false, function () {\n  return [useGetWalletNfts, useWeb3React, useToast];\n});\n\n_c = NftList;\nexport default NftList;\n\nvar _c;\n\n$RefreshReg$(_c, \"NftList\");","map":{"version":3,"sources":["/home/drab/Documents/jazzdefi/src/views/Collectibles/components/NftList.tsx"],"names":["React","useCallback","useEffect","useState","orderBy","nfts","useWeb3React","getBunnySpecialContract","useGetWalletNfts","makeBatchRequest","useToast","NftCard","NftGrid","bunnySpecialContract","NftList","claimableNfts","setClaimableNfts","nftTokenIds","refresh","account","toastError","fetchClaimableStatuses","walletAddress","claimStatuses","map","nft","methods","canClaimSingle","bunnyId","call","reduce","accum","claimStatus","index","error","console","handleSuccess","tokenIds","name"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport orderBy from \"lodash/orderBy\";\nimport nfts from \"config/constants/nfts\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { getBunnySpecialContract } from \"utils/contractHelpers\";\nimport useGetWalletNfts from \"hooks/useGetWalletNfts\";\nimport makeBatchRequest from \"utils/makeBatchRequest\";\nimport { useToast } from \"state/hooks\";\nimport NftCard from \"./NftCard\";\nimport NftGrid from \"./NftGrid\";\n\ntype State = {\n  [key: string]: boolean;\n};\n\nconst bunnySpecialContract = getBunnySpecialContract();\n\nconst NftList = () => {\n  const [claimableNfts, setClaimableNfts] = useState<State>({});\n  const { nfts: nftTokenIds, refresh } = useGetWalletNfts();\n  const { account } = useWeb3React();\n  const { toastError } = useToast();\n\n  const fetchClaimableStatuses = useCallback(\n    async (walletAddress: string) => {\n      try {\n        const claimStatuses = (await makeBatchRequest(\n          nfts.map((nft) => {\n            return bunnySpecialContract.methods.canClaimSingle(\n              walletAddress,\n              nft.bunnyId\n            ).call;\n          })\n        )) as boolean[];\n\n        setClaimableNfts(\n          claimStatuses.reduce((accum, claimStatus, index) => {\n            return {\n              ...accum,\n              [nfts[index].bunnyId]: claimStatus,\n            };\n          }, {})\n        );\n      } catch (error) {\n        console.error(error);\n        toastError(\"Error checking NFT claimable status\");\n      }\n    },\n    [setClaimableNfts, toastError]\n  );\n\n  const handleSuccess = () => {\n    refresh();\n    fetchClaimableStatuses(account);\n  };\n\n  useEffect(() => {\n    if (account) {\n      fetchClaimableStatuses(account);\n    }\n  }, [account, fetchClaimableStatuses]);\n\n  return (\n    <NftGrid>\n      {orderBy(nfts, \"sortOrder\").map((nft) => {\n        const tokenIds = nftTokenIds[nft.bunnyId]\n          ? nftTokenIds[nft.bunnyId].tokenIds\n          : [];\n\n        return (\n          <div key={nft.name}>\n            <NftCard\n              nft={nft}\n              canClaim={claimableNfts[nft.bunnyId]}\n              tokenIds={tokenIds}\n              onSuccess={handleSuccess}\n            />\n          </div>\n        );\n      })}\n    </NftGrid>\n  );\n};\n\nexport default NftList;\n"]},"metadata":{},"sourceType":"module"}