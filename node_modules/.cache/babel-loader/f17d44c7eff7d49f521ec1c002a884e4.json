{"ast":null,"code":"import Cookies from 'js-cookie';\nimport { getProfileContract, getPancakeRabbitContract } from 'utils/contractHelpers';\nimport { getTeam } from 'state/teams/helpers';\nimport nfts from 'config/constants/nfts';\nimport { transformProfileResponse } from './helpers';\nconst profileContract = getProfileContract();\nconst rabbitContract = getPancakeRabbitContract();\nconst profileApi = process.env.REACT_APP_API_PROFILE;\n\nconst getUsername = async address => {\n  try {\n    const response = await fetch(`${profileApi}/api/users/${address}`);\n\n    if (!response.ok) {\n      return '';\n    }\n\n    const {\n      username = ''\n    } = await response.json();\n    return username;\n  } catch (error) {\n    return '';\n  }\n};\n\nconst getProfile = async address => {\n  try {\n    const hasRegistered = await profileContract.methods.hasRegistered(address).call();\n\n    if (!hasRegistered) {\n      return {\n        hasRegistered,\n        profile: null\n      };\n    }\n\n    const profileResponse = await profileContract.methods.getUserProfile(address).call();\n    const {\n      userId,\n      points,\n      teamId,\n      tokenId,\n      nftAddress,\n      isActive\n    } = transformProfileResponse(profileResponse);\n    const team = await getTeam(teamId);\n    const username = await getUsername(address); // If the profile is not active the tokenId returns 0, which is still a valid token id\n    // so only fetch the nft data if active\n\n    let nft;\n\n    if (isActive) {\n      const bunnyId = await rabbitContract.methods.getBunnyId(tokenId).call();\n      nft = nfts.find(nftItem => nftItem.bunnyId === Number(bunnyId)); // Save the preview image in a cookie so it can be used on the exchange\n\n      Cookies.set(`profile_${address}`, {\n        username,\n        avatar: `https://pancakeswap.finance/images/nfts/${nft.images.sm}`\n      }, {\n        domain: 'mozartfinance.io',\n        secure: true,\n        expires: 30\n      });\n    }\n\n    const profile = {\n      userId,\n      points,\n      teamId,\n      tokenId,\n      username,\n      nftAddress,\n      isActive,\n      nft,\n      team\n    };\n    return {\n      hasRegistered,\n      profile\n    };\n  } catch (error) {\n    return null;\n  }\n};\n\nexport default getProfile;","map":{"version":3,"sources":["/home/drab/Documents/jazzdefi/src/state/profile/getProfile.ts"],"names":["Cookies","getProfileContract","getPancakeRabbitContract","getTeam","nfts","transformProfileResponse","profileContract","rabbitContract","profileApi","process","env","REACT_APP_API_PROFILE","getUsername","address","response","fetch","ok","username","json","error","getProfile","hasRegistered","methods","call","profile","profileResponse","getUserProfile","userId","points","teamId","tokenId","nftAddress","isActive","team","nft","bunnyId","getBunnyId","find","nftItem","Number","set","avatar","images","sm","domain","secure","expires"],"mappings":"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","sourcesContent":["import Cookies from 'js-cookie'\nimport { getProfileContract, getPancakeRabbitContract } from 'utils/contractHelpers'\nimport { Nft } from 'config/constants/types'\nimport { Profile } from 'state/types'\nimport { getTeam } from 'state/teams/helpers'\nimport nfts from 'config/constants/nfts'\nimport { transformProfileResponse } from './helpers'\n\nconst profileContract = getProfileContract()\nconst rabbitContract = getPancakeRabbitContract()\nconst profileApi = process.env.REACT_APP_API_PROFILE\n\nexport interface GetProfileResponse {\n  hasRegistered: boolean\n  profile?: Profile\n}\n\nconst getUsername = async (address: string): Promise<string> => {\n  try {\n    const response = await fetch(`${profileApi}/api/users/${address}`)\n\n    if (!response.ok) {\n      return ''\n    }\n\n    const { username = '' } = await response.json()\n\n    return username\n  } catch (error) {\n    return ''\n  }\n}\n\nconst getProfile = async (address: string): Promise<GetProfileResponse> => {\n  try {\n    const hasRegistered = (await profileContract.methods.hasRegistered(address).call()) as boolean\n\n    if (!hasRegistered) {\n      return { hasRegistered, profile: null }\n    }\n\n    const profileResponse = await profileContract.methods.getUserProfile(address).call()\n    const { userId, points, teamId, tokenId, nftAddress, isActive } = transformProfileResponse(profileResponse)\n    const team = await getTeam(teamId)\n    const username = await getUsername(address)\n\n    // If the profile is not active the tokenId returns 0, which is still a valid token id\n    // so only fetch the nft data if active\n    let nft: Nft\n    if (isActive) {\n      const bunnyId = await rabbitContract.methods.getBunnyId(tokenId).call()\n      nft = nfts.find((nftItem) => nftItem.bunnyId === Number(bunnyId))\n\n      // Save the preview image in a cookie so it can be used on the exchange\n      Cookies.set(\n        `profile_${address}`,\n        {\n          username,\n          avatar: `https://pancakeswap.finance/images/nfts/${nft.images.sm}`,\n        },\n        { domain: 'mozartfinance.io', secure: true, expires: 30 },\n      )\n    }\n\n    const profile = {\n      userId,\n      points,\n      teamId,\n      tokenId,\n      username,\n      nftAddress,\n      isActive,\n      nft,\n      team,\n    } as Profile\n\n    return { hasRegistered, profile }\n  } catch (error) {\n    return null\n  }\n}\n\nexport default getProfile\n"]},"metadata":{},"sourceType":"module"}