{"ast":null,"code":"import { getPointCenterIfoContract } from \"utils/contractHelpers\";\nimport ifosList from \"config/constants/ifo\";\nimport { campaignMap } from \"config/constants/campaigns\";\nimport makeBatchRequest from \"./makeBatchRequest\";\nexport const getAchievementTitle = campaign => {\n  switch (campaign.type) {\n    case \"ifo\":\n      return {\n        id: 999,\n        fallback: `IFO Shopper: ${campaign.title}`,\n        data: {\n          name: campaign.title\n        }\n      };\n\n    default:\n      return campaign.title;\n  }\n};\nexport const getAchievementDescription = campaign => {\n  switch (campaign.type) {\n    case \"ifo\":\n      return {\n        id: 999,\n        fallback: `Committed more than $5 worth of LP in the ${campaign.title} IFO`,\n        data: {\n          name: campaign.title\n        }\n      };\n\n    default:\n      return campaign.description;\n  }\n};\n/**\n * Checks if a wallet is eligble to claim points from valid IFO's\n */\n\nexport const getClaimableIfoData = async (account) => {\n  const ifoCampaigns = ifosList.filter(ifoItem => ifoItem.campaignId !== undefined);\n  const ifoCampaignAddresses = ifoCampaigns.map(ifoItem => ifoItem.address);\n  const pointCenterContract = getPointCenterIfoContract(); // Returns the claim status of every IFO with a campaign ID\n\n  const claimStatuses = await pointCenterContract.methods.checkClaimStatuses(account, ifoCampaignAddresses).call(); // Get IFO data for all IFO's that are eligible to claim\n\n  const claimableIfoData = await makeBatchRequest(claimStatuses.reduce((accum, claimStatus, index) => {\n    if (claimStatus === true) {\n      return [...accum, pointCenterContract.methods.ifos(ifoCampaignAddresses[index]).call];\n    }\n\n    return accum;\n  }, [])); // Transform response to an Achievement\n\n  return claimableIfoData.reduce((accum, claimableIfoDataItem) => {\n    if (!campaignMap.has(claimableIfoDataItem.campaignId)) {\n      return accum;\n    }\n\n    const campaignMeta = campaignMap.get(claimableIfoDataItem.campaignId);\n    const {\n      address\n    } = ifoCampaigns.find(ifoCampaign => ifoCampaign.campaignId === claimableIfoDataItem.campaignId);\n    return [...accum, {\n      address,\n      id: claimableIfoDataItem.campaignId,\n      type: \"ifo\",\n      title: getAchievementTitle(campaignMeta),\n      description: getAchievementDescription(campaignMeta),\n      badge: campaignMeta.badge,\n      points: Number(claimableIfoDataItem.numberPoints)\n    }];\n  }, []);\n};","map":{"version":3,"sources":["/home/drab/Documents/jazzdefi/src/utils/achievements.ts"],"names":["getPointCenterIfoContract","ifosList","campaignMap","makeBatchRequest","getAchievementTitle","campaign","type","id","fallback","title","data","name","getAchievementDescription","description","getClaimableIfoData","account","ifoCampaigns","filter","ifoItem","campaignId","undefined","ifoCampaignAddresses","map","address","pointCenterContract","claimStatuses","methods","checkClaimStatuses","call","claimableIfoData","reduce","accum","claimStatus","index","ifos","claimableIfoDataItem","has","campaignMeta","get","find","ifoCampaign","badge","points","Number","numberPoints"],"mappings":"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","sourcesContent":["import { Campaign } from \"config/constants/types\";\nimport { getPointCenterIfoContract } from \"utils/contractHelpers\";\nimport ifosList from \"config/constants/ifo\";\nimport { campaignMap } from \"config/constants/campaigns\";\nimport { Achievement, TranslatableText } from \"state/types\";\nimport makeBatchRequest from \"./makeBatchRequest\";\n\ninterface IfoMapResponse {\n  thresholdToClaim: string;\n  campaignId: string;\n  numberPoints: string;\n}\n\nexport const getAchievementTitle = (campaign: Campaign): TranslatableText => {\n  switch (campaign.type) {\n    case \"ifo\":\n      return {\n        id: 999,\n        fallback: `IFO Shopper: ${campaign.title}`,\n        data: {\n          name: campaign.title as string,\n        },\n      };\n    default:\n      return campaign.title;\n  }\n};\n\nexport const getAchievementDescription = (\n  campaign: Campaign\n): TranslatableText => {\n  switch (campaign.type) {\n    case \"ifo\":\n      return {\n        id: 999,\n        fallback: `Committed more than $5 worth of LP in the ${campaign.title} IFO`,\n        data: {\n          name: campaign.title as string,\n        },\n      };\n    default:\n      return campaign.description;\n  }\n};\n\n/**\n * Checks if a wallet is eligble to claim points from valid IFO's\n */\nexport const getClaimableIfoData = async (\n  account: string\n): Promise<Achievement[]> => {\n  const ifoCampaigns = ifosList.filter(\n    (ifoItem) => ifoItem.campaignId !== undefined\n  );\n  const ifoCampaignAddresses = ifoCampaigns.map((ifoItem) => ifoItem.address);\n  const pointCenterContract = getPointCenterIfoContract();\n\n  // Returns the claim status of every IFO with a campaign ID\n  const claimStatuses = (await pointCenterContract.methods\n    .checkClaimStatuses(account, ifoCampaignAddresses)\n    .call()) as boolean[];\n\n  // Get IFO data for all IFO's that are eligible to claim\n  const claimableIfoData = (await makeBatchRequest(\n    claimStatuses.reduce((accum, claimStatus, index) => {\n      if (claimStatus === true) {\n        return [\n          ...accum,\n          pointCenterContract.methods.ifos(ifoCampaignAddresses[index]).call,\n        ];\n      }\n\n      return accum;\n    }, [])\n  )) as IfoMapResponse[];\n\n  // Transform response to an Achievement\n  return claimableIfoData.reduce((accum, claimableIfoDataItem) => {\n    if (!campaignMap.has(claimableIfoDataItem.campaignId)) {\n      return accum;\n    }\n\n    const campaignMeta = campaignMap.get(claimableIfoDataItem.campaignId);\n    const { address } = ifoCampaigns.find(\n      (ifoCampaign) =>\n        ifoCampaign.campaignId === claimableIfoDataItem.campaignId\n    );\n\n    return [\n      ...accum,\n      {\n        address,\n        id: claimableIfoDataItem.campaignId,\n        type: \"ifo\",\n        title: getAchievementTitle(campaignMeta),\n        description: getAchievementDescription(campaignMeta),\n        badge: campaignMeta.badge,\n        points: Number(claimableIfoDataItem.numberPoints),\n      },\n    ];\n  }, []);\n};\n"]},"metadata":{},"sourceType":"module"}